= Introduction =
Buttons are one way to add interactivity to your dialogs.

=== Button States ===
[[Image:Dialog controls button.jpg|thumb|110px|The same button four times in different states]]

{| class="wikitable"
|-
! State !! Description
|-
| '''Enabled''' || The button has not been [[ctrlEnable|disabled]], it currently doesn't have any mouse or keyboard related focus.
|-
| '''Disabled'''|| The button has been explicitly disabled. It will not be clickable.
|-
| '''Enabled''' + '''Focused'''|| As enabled; additionally it will have a small border of the color defined in the ''colorFocused'' property. This occurs when the button currently has focus (ie. is the default button or has been selected via the ''Tab'' key).
|-
| '''Enabled''' + '''Active'''|| As enabled; additionally it will have a different background as specified in the ''colorBackgroundActive'' background. This occurs when the mouse is currently hovering over an unfocused button.
|-
| '''Enabled''' + '''Active''' + '''Focused'''|| The combined result of the above two states. The mouse is currently hovering over the button in question and it has input focus.
|}

=== Reserved IDCs ===
* IDC = 1 for (contextually) OK or CONTINUE
* IDC = 2 for (contextually) CANCEL, ESCAPE or ABORT

{{Important|If you use these idc values, no action, script or event handler will operate on them.}}

= Alphabetical Order =
{{Informative|TokenNames common to most controls, such as x, y, w, h, text, idc... can be found [[Arma:_GUI_Configuration#Common_Properties|'''here''']].}}

<syntaxhighlight lang="cpp">#define CT_BUTTON 1</syntaxhighlight>
{{Cfg ref|start}}
{{Cfg ref|abc}}
=== A ===
==== action ====
;Type: [[TokenNameValueTypes|String]]
;Description: Script command(s) to execute when button is pressed.
Must use double quotes; single quotes or curly brackets will not work.
The variable "this" is available, and contains the unit that pressed the button, but unlike User Interface Event Handlers no "_this" information about the current control is passed.
{{Important|It is recommended to use [[User_Interface_Event_Handlers#onButtonClick|onButtonClick]] instead.}}
<syntaxhighlight lang="cpp">
action = "'IMPORT'call ENH_fnc_3DENRadio_handlePlaylist";
</syntaxhighlight>
<!-- ==== autocomplete ====
;Type: [[TokenNameValueTypes|Number]]
;Description: Should not apply to this control, rather it's used on [[CT_EDIT]].
<syntaxhighlight lang="cpp">
autocomplete = 0;
</syntaxhighlight> -->
=== B ===
==== borderSize ====
;Type: [[TokenNameValueTypes|Number]]
;Description: If > 0 then a background (in the color defined in 'colorBorder') is drawn behind the button. It extends to the left by the distance defined here, its height is slightly less than that of the button, and it is vertically centered. The width extends to the right, to where the drop shadow starts. Stays static when button is pressed.
<syntaxhighlight lang="cpp">
borderSize = 0;
</syntaxhighlight>
=== C ===
<!-- ==== canModify ====
;Type: [[TokenNameValueTypes|Number]]
;Description: n/a
<syntaxhighlight lang="cpp">
canModify = 1;
</syntaxhighlight> -->
==== color ====
;Type: [[TokenNameValueTypes|Array]]
;Description: n/a
<syntaxhighlight lang="cpp">
color[] = {0, 0, 0, 0};
</syntaxhighlight>
<!-- ==== colorActive ====
;Type: [[TokenNameValueTypes|Array]]
;Description: n/a
<syntaxhighlight lang="cpp">
colorActive[] = {0, 0, 0, 0};
</syntaxhighlight> -->
==== colorBackgroundActive ====
;Type: [[TokenNameValueTypes|Array]]
;Description: Background color if "active" (i.e. mouse pointer is over it).
<syntaxhighlight lang="cpp">
colorBackgroundActive[] = {0, 0, 0, 1};
</syntaxhighlight>
==== colorBackgroundDisabled ====
;Type: [[TokenNameValueTypes|Array]]
;Description: Background color if control is disabled.
<syntaxhighlight lang="cpp">
colorBackgroundDisabled[] = {0, 0, 0, 0.5};
</syntaxhighlight>
==== colorBorder ====
;Type: [[TokenNameValueTypes|Array]]
;Description: Color of left border, defined in 'borderSize'.
<syntaxhighlight lang="cpp">
colorBorder[] = {0, 0, 0, 1};
</syntaxhighlight>
==== colorFocused ====
;Type: [[TokenNameValueTypes|Array]]
;Description: Alternating background color. While the control has focus (but without the mouse pointer being over it) the background will cycle between 'colorFocused' and 'colorBackground' or, if defined, 'colorFocused2'. If both are the same, then the color will be steady.
<syntaxhighlight lang="cpp">
colorFocused[] = {0, 0, 0, 1};
</syntaxhighlight>
==== colorFocused2 ====
;Type: [[TokenNameValueTypes|Array]]
;Description: n/a
<syntaxhighlight lang="cpp">
colorFocused2[] = {1, 1, 1, 0.1};
</syntaxhighlight>
<!-- ==== colorSelection ====
;Type: [[TokenNameValueTypes|Array]]
;Description: n/a
<syntaxhighlight lang="cpp">
colorSelection[] = {0.47, 0.49, 0.47, 0.93};
</syntaxhighlight> -->
==== colorShadow ====
;Type: [[TokenNameValueTypes|Array]]
;Description: Color of drop shadow behind button (not visible if button disabled or foreground color) has an alpha of 1.
<syntaxhighlight lang="cpp">
colorShadow[] = {0, 0, 0, 0};
</syntaxhighlight>
<!-- === I ===
==== idcx ====
;Type: [[TokenNameValueTypes|Number]]
;Description: n/a
<syntaxhighlight lang="cpp">
idcx = 930;
</syntaxhighlight> -->
=== K ===
==== KeyHints ====
;Type: [[TokenNameValueTypes|Class]]
;Description: n/a
<syntaxhighlight lang="cpp">
class KeyHints
{
	class KeyA
	{
		key = "0x00050000 + 0";
		hint = "Test";
	};
};
</syntaxhighlight>
=== O ===
==== offsetPressedX ====
;Type: [[TokenNameValueTypes|Number]], [[TokenNameValueTypes|String]]
;Description: The button's text & background will move by this distance horizontally when pressed. Distance is in [[Arma_3_GUI_Coordinates|UI Coordinates]].
(If a shadow is defined, it will stay in place.)
<syntaxhighlight lang="cpp">
offsetPressedX = 0;
</syntaxhighlight>
==== offsetPressedY ====
;Type: [[TokenNameValueTypes|Number]], [[TokenNameValueTypes|String]]
;Description: The button's text & background will move by this distance vertically when pressed. Distance is in [[Arma_3_GUI_Coordinates|UI Coordinates]].
(If a shadow is defined, it will stay in place.)
<syntaxhighlight lang="cpp">
offsetPressedY = 0;
</syntaxhighlight>
==== offsetX ====
;Type: [[TokenNameValueTypes|Number]]
;Description: Horizontal offset of drop shadow.
If 0, then shadow will be placed directly behind button
<syntaxhighlight lang="cpp">
offsetX = 0;
</syntaxhighlight>
==== offsetY ====
;Type: [[TokenNameValueTypes|Number]]
;Description: Vertical offset of drop shadow.
If 0, then shadow will be placed directly behind button
<syntaxhighlight lang="cpp">
offsetY = 0;
</syntaxhighlight>
=== P ===
==== period ====
;Type: [[TokenNameValueTypes|Number]]
;Description: Defines how fast the button is oscillating between the colorActive and colorBackground while it is active.
<syntaxhighlight lang="cpp">
period = 1.2;
</syntaxhighlight>
==== periodFocus ====
;Type: [[TokenNameValueTypes|Number]]
;Description: n/a
<syntaxhighlight lang="cpp">
periodFocus = 2;
</syntaxhighlight>
==== periodOver ====
;Type: [[TokenNameValueTypes|Number]]
;Description: n/a
<syntaxhighlight lang="cpp">
periodOver = 0.5;
</syntaxhighlight>
=== S ===
==== shadow ====
;Type: [[TokenNameValueTypes|Number]]
;Description: Possbile values: 0 (no shadow), 1 (normal text shadow), 2 (text outline).
<syntaxhighlight lang="cpp">
shadow = 2;
</syntaxhighlight>
==== shortcuts ====
;Type: [[TokenNameValueTypes|Array]]
;Description: Key short cuts. Often overwritten/ignored by engine.
<syntaxhighlight lang="cpp">
shortcuts[] = {'0x00050000 + 0', 28, 57, 156};
</syntaxhighlight>
==== soundClick ====
;Type: [[TokenNameValueTypes|Array]]
;Description: Sound array played when the button is clicked and released.
{{AnswerMe|What do the numbers in these arrays mean?}}
<syntaxhighlight lang="cpp">
soundClick[] = {'\A3\ui_f\data\sound\RscButton\soundClick', 0.09, 1};
</syntaxhighlight>
==== soundEnter ====
;Type: [[TokenNameValueTypes|Array]]
;Description: Sound array played when the mouse enters the button's area.
<syntaxhighlight lang="cpp">
soundEnter[] = {'\A3\ui_f\data\sound\RscButton\soundEnter', 0.09, 1};
</syntaxhighlight>
==== soundEscape ====
;Type: [[TokenNameValueTypes|Array]]
;Description: n/a
<syntaxhighlight lang="cpp">
soundEscape[] = {'\A3\ui_f\data\sound\RscButton\soundEscape', 0.09, 1};
</syntaxhighlight>
==== soundPush ====
;Type: [[TokenNameValueTypes|Array]]
;Description: Sound array played when the button is pushed down.
<syntaxhighlight lang="cpp">
soundPush[] = {'\A3\ui_f\data\sound\RscButton\soundPush', 0.09, 1};
</syntaxhighlight>
<!-- === T ===
==== textImport ====
;Type: [[TokenNameValueTypes|String]]
;Description: n/a
<syntaxhighlight lang="cpp">
textImport = "Import";
</syntaxhighlight>
==== textLoad ====
;Type: [[TokenNameValueTypes|String]]
;Description: n/a
<syntaxhighlight lang="cpp">
textLoad = "Open";
</syntaxhighlight>
==== textMerge ====
;Type: [[TokenNameValueTypes|String]]
;Description: n/a
<syntaxhighlight lang="cpp">
textMerge = "Merge";
</syntaxhighlight>
==== textSave ====
;Type: [[TokenNameValueTypes|String]]
;Description: n/a
<syntaxhighlight lang="cpp">
textSave = "Save";
</syntaxhighlight>
==== textSearch ====
;Type: [[TokenNameValueTypes|String]]
;Description: n/a
<syntaxhighlight lang="cpp">
textSearch = "\a3\Ui_f\data\GUI\RscCommon\RscButtonSearch\search_end_ca.paa";
</syntaxhighlight> -->
=== U ===
==== url ====
;Type: [[TokenNameValueTypes|String]]
;Description: URL which will be opened with default web browser. If tooltip is empty, URL will also be set as that. URL must contain http(s)://.
<syntaxhighlight lang="cpp">
url = "https://community.bistudio.com/CT_BUTTON";
</syntaxhighlight>
{{Cfg ref|end}}

= Default Classes =
The following classes are part of the export that is generated with <code>"Default" call [[BIS_fnc_exportGUIBaseClasses]]</code>
{{Informative|In order for the classes below to work you need to have them exported with the function above.}}

== RscButton ==
<syntaxhighlight lang="cpp">
class RscButton
{
	deletable = 0;
	fade = 0;
	access = 0;
	type = CT_BUTTON;
	text = "";
	colorText[] = {1,1,1,1};
	colorDisabled[] = {1,1,1,0.25};
	colorBackground[] = {0,0,0,0.5};
	colorBackgroundDisabled[] = {0,0,0,0.5};
	colorBackgroundActive[] = {0,0,0,1};
	colorFocused[] = {0,0,0,1};
	colorShadow[] = {0,0,0,0};
	colorBorder[] = {0,0,0,1};
	soundEnter[] =
	{
		"\A3\ui_f\data\sound\RscButton\soundEnter",
		0.09,
		1
	};
	soundPush[] =
	{
		"\A3\ui_f\data\sound\RscButton\soundPush",
		0.09,
		1
	};
	soundClick[] =
	{
		"\A3\ui_f\data\sound\RscButton\soundClick",
		0.09,
		1
	};
	soundEscape[] =
	{
		"\A3\ui_f\data\sound\RscButton\soundEscape",
		0.09,
		1
	};
	idc = -1;
	style = ST_CENTER;
	x = 0;
	y = 0;
	w = 0.095589;
	h = 0.039216;
	shadow = 2;
	font = "RobotoCondensed";
	sizeEx = GUI_TEXT_SIZE_MEDIUM;
	url = "";
	offsetX = 0;
	offsetY = 0;
	offsetPressedX = 0;
	offsetPressedY = 0;
	borderSize = 0;
};
</syntaxhighlight>

== RscButtonTextOnly ==
Nothing but text. No background, no oscillating color.
<syntaxhighlight lang="cpp">
class RscButtonTextOnly: RscButton
{
	SizeEx = GUI_TEXT_SIZE_SMALL;
	colorBackground[] = {1,1,1,0};
	colorBackgroundActive[] = {1,1,1,0};
	colorBackgroundDisabled[] = {1,1,1,0};
	colorFocused[] = {1,1,1,0};
	colorShadow[] = {1,1,1,0};
	borderSize = 0;
};
</syntaxhighlight>

[[Category: Dialogs]]